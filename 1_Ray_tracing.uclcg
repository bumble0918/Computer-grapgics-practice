function setup()
{
	UI = {};
	UI.tabs = [];
	UI.titleLong = 'Ray Tracer';
	UI.titleShort = 'RayTracerSimple';
	UI.numFrames = 1000;
	UI.maxFPS = 24;
	UI.renderWidth = 800;
	UI.renderHeight = 400;

	UI.tabs.push(
		{
		visible: true,
		type: `x-shader/x-fragment`,
		title: `RaytracingDemoFS - GL`,
		id: `RaytracingDemoFS`,
		initialValue: `#define SOLUTION_CYLINDER_AND_PLANE
#define SOLUTION_MATERIAL
#define SOLUTION_SHADOW
#define SOLUTION_REFLECTION_REFRACTION
#define SOLUTION_FRESNEL

precision highp float;
uniform float time;

struct PointLight {
    vec3 position;
    vec3 color;
};

struct Material {
	// The diffuse material vector defines the color (brightness) of the object under diffuse lighting (the desired object's color)
    vec3  diffuse;
	// The specular material vector defines the color (brightness) impact that a specular light has on the object
    vec3  specular;
	// The glossiness (shininess) is the power of light, which defines the scattering radius of the specular light on the object
	// High glossiness value, sharp and small highlights; Low glossiness value, blurred and large highlights
    float glossiness;
#ifdef SOLUTION_MATERIAL
	float ReflectionWeight; // Decide the light amount remained after reflection  
	float RefractionWeight; // Decide the light amount remained after refraction
	float IOR; // Index of Refraction
#endif
};

struct Sphere {
    vec3 position;
    float radius;
    Material material;
};

struct Plane {
    vec3 normal;
    float d;
    Material material;
};

struct Cylinder {
    vec3 position;
    vec3 direction;  
    float radius;
    Material material;
};

const int lightCount = 2;
const int sphereCount = 3;
const int planeCount = 1;
const int cylinderCount = 2;

struct Scene {
    vec3 ambient;
    PointLight[lightCount] lights;
    Sphere[sphereCount] spheres;
    Plane[planeCount] planes;
    Cylinder[cylinderCount] cylinders;
};

struct Ray {
    vec3 origin;
    vec3 direction;
};

// Contains all information pertaining to a ray/object intersection
struct HitInfo {
    bool hit;
    float t;
    vec3 position;
    vec3 normal;
    Material material;
};

HitInfo getEmptyHit() {
	return HitInfo(
      	false, 
      	0.0, 
      	vec3(0.0), 
      	vec3(0.0), 
#ifdef SOLUTION_MATERIAL
		// Update the constructor call
		Material(vec3(0.0), vec3(0.0), 0.0, 0.0, 0.0, 0.0)
#else
		Material(vec3(0.0), vec3(0.0), 0.0, 0.0, 0.0, 0.0)
#endif
	);
}

// Sorts the two t values such that t1 is smaller than t2
void sortT(inout float t1, inout float t2) {
  	// Make t1 the smaller t
    if (t2 < t1) {
		float temp = t1;
		t1 = t2;
		t2 = temp;
    }
}

// Tests if t is in an interval
bool isTInInterval(const float t, const float tMin, const float tMax) {
	return t > tMin && t < tMax;
}

// Get the smallest t in an interval
bool getSmallestTInInterval(float t0, float t1, const float tMin, const float tMax, inout float smallestTInInterval) {
	sortT(t0, t1);
	// As t0 is smaller, test this first
	if (isTInInterval(t0, tMin, tMax)) {
		smallestTInInterval = t0;
        return true;
	}
  
	// If t0 was not in the interval, still t1 could be
	if (isTInInterval(t1, tMin, tMax)) {
		smallestTInInterval = t1;
		return true;
	}  
	// None was
	return false;
}

HitInfo intersectSphere(const Ray ray, const Sphere sphere, const float tMin, const float tMax) {
              
    vec3 to_sphere = ray.origin - sphere.position;
 
    float a = dot(ray.direction, ray.direction);
	float b = 2.0 * dot(ray.direction, to_sphere);
    float c = dot(to_sphere, to_sphere) - sphere.radius * sphere.radius;
    float D = b * b - 4.0 * a * c;
    if (D > 0.0)
    {
		float t0 = (-b - sqrt(D)) / (2.0 * a);
		float t1 = (-b + sqrt(D)) / (2.0 * a);
      
      	float smallestTInInterval;
      	if (!getSmallestTInInterval(t0, t1, tMin, tMax, smallestTInInterval)) {
			return getEmptyHit();
        }
      
      	vec3 hitPosition = ray.origin + smallestTInInterval * ray.direction;      

      	vec3 normal = 
			length(ray.origin - sphere.position) < sphere.radius + 0.001 ? 
          	-normalize(hitPosition - sphere.position) : 
      		normalize(hitPosition - sphere.position);      

        return HitInfo(
          	true,
          	smallestTInInterval,
          	hitPosition,
          	normal,
          	sphere.material
        );
    }
    return getEmptyHit();
}

HitInfo intersectPlane(const Ray ray,const Plane plane, const float tMin, const float tMax) {
#ifdef SOLUTION_CYLINDER_AND_PLANE
	// The equation of a plane is: A * (x - x0) + B * (y - y0) + C * (z - z0) = 0
	// Where [A, B, C] is the direction vector of this plane
	// And [x0, y0, z0] is the intersection point of this plane and the direction
	// [x0, y0, z0] = sqrt(r^2 / (A^2 + B^2 + C^2)) * [A, B, C]
	// Then subsitute the equation of the ray (ray.origin + ray.direction * t) into the equation of the plane
	// The root is the intersection position of the ray and the plane
	float d = sqrt(plane.d * plane.d/(dot(plane.normal, plane.normal)));
	float a = -d * dot(plane.normal, plane.normal);
	float b = -dot(plane.normal, ray.origin);
	float c = dot(plane.normal, ray.direction);
	float t = (a + b) / c;
	
    if (isTInInterval(t, tMin, tMax)) {	
	vec3 hitPosition = ray.origin + t * ray.direction;
	vec3 normal = plane.normal;
	
	return HitInfo(
		true,
		t,
		hitPosition,
		normal,
		plane.material
	);
	}
	return getEmptyHit();
#endif  
    return getEmptyHit();
}

float lengthSquared(vec3 x) {
	return dot(x, x);
}

HitInfo intersectCylinder(const Ray ray, const Cylinder cylinder, const float tMin, const float tMax) {
#ifdef SOLUTION_CYLINDER_AND_PLANE
	// The equation of cylinder is derived by the principle that
	// The length of the line between the cylinder position and the intersection position, multipled by sin(theta)
	// can obtain the cylinder radius, and cos(theta) is the dot product of the line and the cylinder direction divided by their norms  
	// Similar to shpere and plane, the intersection position is the root of the equation
	// of the cylinder after the equation of the ray is subsitituted into
	float rD2 = dot(ray.direction, ray.direction);
	float cD2 = dot(cylinder.direction, cylinder.direction);
	float rDcD = dot(ray.direction, cylinder.direction);
	vec3 rOcP = (ray.origin - cylinder.position);

	float a = rD2 * cD2 - rDcD * rDcD;
	float b = 2.0 * cD2 * dot(ray.direction, rOcP) - 2.0 * rDcD * dot(cylinder.direction, rOcP);
	float c = cD2 * dot(rOcP, rOcP) - dot(cylinder.direction, rOcP) * dot(cylinder.direction, rOcP) - cylinder.radius * cylinder.radius * cD2;
	float D = b * b - 4.0 * a * c;
    if (D > 0.0){
		float t0 = (-b - sqrt(D)) / (2.0 * a);
		float t1 = (-b + sqrt(D)) / (2.0 * a);
      
      	float smallestTInInterval;
      	if (!getSmallestTInInterval(t0, t1, tMin, tMax, smallestTInInterval)) {
			return getEmptyHit();
        }
      
		vec3 hitPosition = ray.origin + smallestTInInterval * ray.direction;
		float ta = t0 + t1 - smallestTInInterval;
		vec3 hitP = ray.origin + ta * ray.direction;
		vec3 VerticalPoint = cylinder.position + dot(hitPosition - cylinder.position, cylinder.direction)*cylinder.direction;
      	vec3 normal = 
			length(hitP - ray.origin) < length(hitP - hitPosition) + 0.001 ? // Test whether the ray origin is outside or inside the cylinder 
            -normalize(hitPosition - VerticalPoint): 
      		normalize(hitPosition - VerticalPoint);      

        return HitInfo(
          	true,
          	smallestTInInterval,
          	hitPosition,
          	normal,
          	cylinder.material
        );
    }
    return getEmptyHit();
#endif  
    return getEmptyHit();	
}

HitInfo getBetterHitInfo(const HitInfo oldHitInfo, const HitInfo newHitInfo) {
	if(newHitInfo.hit)
  		if(newHitInfo.t < oldHitInfo.t)  // No need to test for the interval, this has to be done per-primitive
          return newHitInfo;
  	return oldHitInfo;
}

HitInfo intersectScene(const Scene scene, const Ray ray, const float tMin, const float tMax) {
	HitInfo bestHitInfo;
	bestHitInfo.t = tMax;
	bestHitInfo.hit = false;
	for (int i = 0; i < cylinderCount; ++i) {
    	bestHitInfo = getBetterHitInfo(bestHitInfo, intersectCylinder(ray, scene.cylinders[i], tMin, tMax));
	}
	for (int i = 0; i < sphereCount; ++i) {
		bestHitInfo = getBetterHitInfo(bestHitInfo, intersectSphere(ray, scene.spheres[i], tMin, tMax));
	}
	for (int i = 0; i < planeCount; ++i) {
		bestHitInfo = getBetterHitInfo(bestHitInfo, intersectPlane(ray, scene.planes[i], tMin, tMax));
	}
  
	return bestHitInfo;
}

vec3 shadeFromLight(
	const Scene scene,
	const Ray ray,
	const HitInfo hit_info,
	const PointLight light)
{ 
	vec3 hitToLight = light.position - hit_info.position;
  
	vec3 lightDirection = normalize(hitToLight);
	vec3 viewDirection = normalize(hit_info.position - ray.origin);
	vec3 reflectedDirection = reflect(viewDirection, hit_info.normal);
	float diffuse_term = max(0.0, dot(lightDirection, hit_info.normal));
	float specular_term  = pow(max(0.0, dot(lightDirection, reflectedDirection)), hit_info.material.glossiness);

#ifdef SOLUTION_SHADOW
	// Generate a new ray traced from the intersection point back to the light position
	// If the new ray is intersected with other objects, the intersection position should be shadowed
	Ray shadowRay;
	shadowRay.origin = hit_info.position; 
	shadowRay.direction = hitToLight;
	HitInfo hitInfoShadow;
	// One typical error, which I also made at first, is that the tmax value should be smaller
	// to avoid the new ray intersecting with the object behind the light position and getting wrong shadows
	hitInfoShadow = intersectScene(scene, shadowRay, 0.001, 1.0); 
	float visibility = 1.0;	
	if (! hitInfoShadow.hit){ visibility = 1.0;	}
	else { visibility = 0.0; }
	
	Ray mirrorRay;
	mirrorRay.origin = hit_info.position;
	mirrorRay.direction = reflect(lightDirection, hit_info.normal);
	HitInfo mirrorHitInfo = intersectScene(scene, mirrorRay, 0.001, 100000.0);

    return visibility *
	light.color * (specular_term * 
	hit_info.material.specular + diffuse_term 
	* hit_info.material.diffuse);	
#else
	float visibility = 1.0;
#endif
}

vec3 background(const Ray ray) {
	// A simple implicit sky that can be used for the background
	return vec3(0.2) + vec3(0.8, 0.6, 0.5) * max(0.0, ray.direction.y);
}

// It seems to be a WebGL issue that the third parameter needs to be inout instead of const on Tobias' machine
vec3 shade(const Scene scene, const Ray ray, inout HitInfo hitInfo) {

  	if(!hitInfo.hit) {
		return background(ray);
  	}
  
    vec3 shading = scene.ambient * hitInfo.material.diffuse;
    for (int i = 0; i < lightCount; ++i) {
		shading += shadeFromLight(scene, ray, hitInfo, scene.lights[i]); 
    }
    return shading;
}


Ray getFragCoordRay(const vec2 frag_coord) {
	float sensorDistance = 1.0;
  	vec2 sensorMin = vec2(-1, -0.5);
  	vec2 sensorMax = vec2(1, 0.5);
  	vec2 pixelSize = (sensorMax- sensorMin) / vec2(800, 400);
  	vec3 origin = vec3(0, 0, sensorDistance);
    vec3 direction = normalize(vec3(sensorMin + pixelSize * frag_coord, -sensorDistance));  
  
  	return Ray(origin, direction);
}

// The Fresnel equations describe the reflection and transmission of light
// when incident on an interface between different optical media

// fresnel_1 uses the basic equations and fresnel_2 uses Schilik approximation
// The results are slightly different that the Schilik approximation has 
// better performance of reflection on the edge of the glass sphere

float fresnel_1(const Ray ray, const HitInfo hitInfo, float currentIOR, float nextIOR){
#ifdef SOLUTION_FRESNEL
	float n1 = currentIOR; // The index of refraction in the media being left
	float n2 = nextIOR; // The index of refraction in the media being entered
	float cos1 = dot(-ray.direction, hitInfo.normal); // the angle between the insight and the normal at the hit point
	float n = 
	cos1 < 0.0 ? // Test whether the light is entering or leaving an object
	n2 / n1: // The two IOR should be swapped if the light if leaving the object
	n1 / n2;
	float sin2 = n * n * (1.0 - cos1 * cos1);
	float kr;
	float cos2_2 = 1.0 - sin2;
	float cos2 = sqrt(abs(cos2_2));
	float Rs = ((n1 * cos1) - (n2 * cos2)) / ((n1 * cos1) + (n2 * cos2)); 
	float Rp = ((n1 * cos2) - (n2 * cos1)) / ((n1 * cos2) + (n2 * cos1)); 
	Rs = Rs * Rs; // The reflectance of s-polarized light
	Rp = Rp * Rp; // The reflectance of p-polarized light
	//The effective reflectivity of the material can be seen as the average of the two reflectivities
	kr = (Rs + Rp) / 2.0; 
	if(sin2 >= 1.0){ // Total internal reflection happens
		kr = 1.0;
	}
	return kr;
#else
	return 1.0;
#endif
}

float fresnel_2(const Ray ray, const HitInfo hitInfo, float currentIOR, float nextIOR){
#ifdef SOLUTION_FRESNEL
	// Schlick aproximation
	float n1 = currentIOR; // The index of refraction in the media being left
	float n2 = nextIOR; // The index of refraction in the media being entered
	float r0 = (n1 - n2) / (n1 + n2);
    float R0 = r0 * r0; // The reflection coefficient for light incoming parallel to the normal
    float cos1 = dot(-ray.direction, hitInfo.normal); // the angle between the insight and the normal at the hit point
	float kr;
	float n = n1 / n2;
	float sin2 = n * n * (1.0 - cos1 * cos1);
	float x = 
	cos1 < 0.0 ? // Test whether the light is entering or leaving an object
	1.0 - sqrt(1.0 - sin2):
	1.0 - cos1;
    kr = R0 + (1.0 - R0) * x * x * x * x * x;
	if(sin2 >= 1.0){ // Total internal reflection happens
		kr = 1.0;
	}
	return kr;
#else
	return 1.0;
#endif
}

vec3 colorForFragment(const Scene scene, const vec2 fragCoord) {
      
    Ray initialRay = getFragCoordRay(fragCoord);  
  	HitInfo initialHitInfo = intersectScene(scene, initialRay, 0.001, 10000.0);  
  	vec3 result = shade(scene, initialRay, initialHitInfo);
	
  	Ray currentRay;
  	HitInfo currentHitInfo;
  	
  	// Compute the reflection
  	currentRay = initialRay;
  	currentHitInfo = initialHitInfo;
	
	float currentIOR = 1.0;
  	float nextIOR;
	
  	// The initial strength of the reflection
  	float reflectionWeight = 1.0;
	
  	const int maxReflectionStepCount = 2;
  	for (int i = 0; i < maxReflectionStepCount; i++) {
		if (!currentHitInfo.hit) break;
      
#ifdef SOLUTION_REFLECTION_REFRACTION
		reflectionWeight *= currentHitInfo.material.ReflectionWeight;
		if(reflectionWeight == 0.0) break;
#endif
      
#ifdef SOLUTION_FRESNEL
		// Add Fresnel contribution
		nextIOR = currentHitInfo.material.IOR;
		float kr = fresnel_2(currentRay, currentHitInfo, currentIOR, nextIOR);
		reflectionWeight *= kr;		
#else
		reflectionWeight *= 0.5;
#endif
      	Ray nextRay;	
#ifdef SOLUTION_REFLECTION_REFRACTION
		nextRay.origin = currentHitInfo.position;
		// The reflection ray has a symmetric direction with the insight ray about the hit normal
		nextRay.direction = currentRay.direction - 2.0 * currentHitInfo.normal * dot(currentHitInfo.normal,currentRay.direction);
		// Use the reflect function to test the above calculation
		//nextRay.direction = reflect(currentRay.direction, currentHitInfo.normal); 
		
		// To avoid hitting the same object the ray is reflected from, 
		// by changing the position of the reflected ray origin away from the surface for a small amount
		nextRay.origin += nextRay.direction * 0.001;
#endif	
		currentRay = nextRay; 
		currentHitInfo = intersectScene(scene, currentRay, 0.001, 10000.0);             
		result += reflectionWeight * shade(scene, currentRay, currentHitInfo);
    }
  
	// Compute the refraction
	currentRay = initialRay;  
	currentHitInfo = initialHitInfo;
	
	// The initial medium is air
	currentIOR = 1.0;
	nextIOR = currentHitInfo.material.IOR;

  	// The initial strength of the refraction.
  	float refractionWeight = 1.0;
  
  	const int maxRefractionStepCount = 2;
  	for(int i = 0; i < maxRefractionStepCount; i++) {
      
#ifdef SOLUTION_REFLECTION_REFRACTION
		refractionWeight *= currentHitInfo.material.RefractionWeight; 
		if(refractionWeight == 0.0) break;
#else
		refractionWeight *= 0.5;      
#endif

#ifdef SOLUTION_FRESNEL
		// Add Fresnel contribution
		float kr = fresnel_2(currentRay, currentHitInfo, currentIOR, nextIOR);
		if(kr >= 1.0) break;
		refractionWeight *= (1.0 - kr);
#endif 
		
		Ray nextRay;
#ifdef SOLUTION_REFLECTION_REFRACTION      
		float n = currentIOR / nextIOR;
		float cos_theta1 = dot(-currentRay.direction, currentHitInfo.normal);
		if (cos_theta1 < 0.0) {	// Test if the light is leaving an object
		n = 1.0 / n; // Swap the indeices of refraction of the two materials
		cos_theta1 = - cos_theta1; // Change the sign of cos(theta1)
		currentHitInfo.normal = - currentHitInfo.normal; // The normal direction should be inversed
		}
		float cos_theta2_2 = 1.0 - n * n *(1.0 - cos_theta1 * cos_theta1);
		float cos_theta2 = sqrt(abs(cos_theta2_2)); 
		//if(cos_theta2_2 <= 0.0) break; // Total internal reflection test has been done in fresnel function
		vec3 T = n * (currentRay.direction + currentHitInfo.normal * cos_theta1)
			- currentHitInfo.normal * cos_theta2;
		
		// The new refraction ray
		nextRay.origin = currentHitInfo.position;
		nextRay.direction = T;
		// Use the refract function to test the above calculation
		//nextRay.direction = refract(currentRay.direction, currentHitInfo.normal, n);
		
		// To avoid hitting the same object the ray is refracted from, 
		// by changing the position of the reflected ray origin away from the surface for a small amount:
		nextRay.origin += nextRay.direction * 0.001;
		nextIOR = currentHitInfo.material.IOR;
		currentRay = nextRay;  		
#endif
		
		currentHitInfo = intersectScene(scene, currentRay, 0.001, 10000.0);  
		result += refractionWeight * shade(scene, currentRay, currentHitInfo); 
      
		if (!currentHitInfo.hit) break;
	}
	return result;
}

Material getDefaultMaterial() {
#ifdef SOLUTION_MATERIAL
	// Update the default material call to match the new parameters of Material
	return Material(vec3(0.3), vec3(0), 1.0, 0.0, 0.0, 1.0);
#else
	return Material(vec3(0.3), vec3(0), 1.0, 0.0, 0.0, 1.0);
#endif
}

Material getPaperMaterial() {
	// Right sphere, back cylinder, light grey
#ifdef SOLUTION_MATERIAL
	// Replace by your definition of a paper material
	return Material(
		vec3(0.7), // Diffuse: the colour (brightness) of the paper material under diffuse lighting (the desired color of the paper)
		vec3(0.2), //Specular: the colour (brightness) of the specular light impacted to the paper
		3.0, // Glossiness: the scattering radius of the specular light on the paper
		0.4, // Reflection weight of paper
		0.0, // Refraction weight of paper, not transparent
		1.6 // Index of refraction of paper
		);
#else
    return getDefaultMaterial();
#endif
}

Material getPlasticMaterial() {
	// Left sphere and front cylinder, orange
#ifdef SOLUTION_MATERIAL
	return Material(
		vec3(235.0, 75.0, 20.0)/255.0, // RGB values represent colours 
		vec3(0.6), 
		10.0, // In general, dull objects (like plastics and matte materials) have a low specular power (between 2 and 10).
		0.8,
		0.0, // Not transparent, no refraction 
		1.3 
		);
#else
  	return getDefaultMaterial();
#endif
}

Material getGlassMaterial() {
	// Middle sphere, dark grey
#ifdef SOLUTION_MATERIAL
	return Material(
		vec3(0.05), 
		vec3(0.0), 
		70.0, // In general, very shiny objects (like glass and polished metal) have a high specular power (between 50 and 128) 
		1.0, // High reflection
		1.0, // Transparent, high refraction
		1.25
		);
#else
	return getDefaultMaterial();
#endif
}

Material getSteelMirrorMaterial() {
	//plane
#ifdef SOLUTION_MATERIAL
	return Material(
		vec3(0.1), 
		vec3(0.9), 
		70.0,
		0.8, // Mirror has high reflection
		0.0, // Not transparent, no refraction 
		1.6
		);
#else
	return getDefaultMaterial();
#endif
}

vec3 tonemap(const vec3 radiance) {
	const float monitorGamma = 2.0;
	return pow(radiance, vec3(1.0 / monitorGamma));
}

void main()
{
    // Setup scene
	Scene scene;
  	scene.ambient = vec3(0.12, 0.15, 0.2);
  
    // Lights
    scene.lights[0].position = vec3(5, 15, -5);
    scene.lights[0].color    = 0.5 * vec3(0.9, 0.5, 0.1);
    
  	scene.lights[1].position = vec3(-15, 5, 2);
    scene.lights[1].color    = 0.5 * vec3(0.1, 0.3, 1.0);
  
    // Primitives
    scene.spheres[0].position            	= vec3(10, -5, -16);
    scene.spheres[0].radius              	= 6.0;
    scene.spheres[0].material 				= getPaperMaterial();
    
  	scene.spheres[1].position            	= vec3(-7, -1, -13);
    scene.spheres[1].radius             	= 4.0;
    scene.spheres[1].material				= getPlasticMaterial();
  
    scene.spheres[2].position            	= vec3(0, 0.5, -5);
    scene.spheres[2].radius              	= 2.0;
    scene.spheres[2].material   			= getGlassMaterial();

  	scene.planes[0].normal            		= vec3(0, 1, 0);
  	scene.planes[0].d              			= 4.5;
    scene.planes[0].material				= getSteelMirrorMaterial();
  
  	scene.cylinders[0].position            	= vec3(-1, 1, -18);
  	scene.cylinders[0].direction            = normalize(vec3(-1, 2, -1));
  	scene.cylinders[0].radius         		= 1.5;
    scene.cylinders[0].material				= getPaperMaterial();
  
  	scene.cylinders[1].position            	= vec3(4, 1, -5);
  	scene.cylinders[1].direction            = normalize(vec3(1, 4, 1));
  	scene.cylinders[1].radius         		= 0.4;
    scene.cylinders[1].material				= getPlasticMaterial();

	// compute color for fragment
	gl_FragColor.rgb = tonemap(colorForFragment(scene, gl_FragCoord.xy));
	gl_FragColor.a = 1.0;

}
`,
		description: ``,
		wrapFunctionStart: ``,
		wrapFunctionEnd: ``
	});

	UI.tabs.push(
		{
		visible: false,
		type: `x-shader/x-vertex`,
		title: `RaytracingDemoVS - GL`,
		id: `RaytracingDemoVS`,
		initialValue: `attribute vec3 position;
    uniform mat4 modelViewMatrix;
    uniform mat4 projectionMatrix;
  
    void main(void) {
        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
    }
`,
		description: ``,
		wrapFunctionStart: ``,
		wrapFunctionEnd: ``
	});

	 return UI; 
}//!setup

var gl;
function initGL(canvas) {
	try {
		gl = canvas.getContext("experimental-webgl");
		gl.viewportWidth = canvas.width;
		gl.viewportHeight = canvas.height;
	} catch (e) {
	}
	if (!gl) {
		alert("Could not initialise WebGL, sorry :-(");
	}
}

function getShader(gl, id) {
	var shaderScript = document.getElementById(id);
	if (!shaderScript) {
		return null;
	}

	var str = "";
	var k = shaderScript.firstChild;
	while (k) {
		if (k.nodeType == 3) {
			str += k.textContent;
		}
		k = k.nextSibling;
	}

	var shader;
	if (shaderScript.type == "x-shader/x-fragment") {
		shader = gl.createShader(gl.FRAGMENT_SHADER);
	} else if (shaderScript.type == "x-shader/x-vertex") {
		shader = gl.createShader(gl.VERTEX_SHADER);
	} else {
		return null;
	}

    console.log(str);
	gl.shaderSource(shader, str);
	gl.compileShader(shader);

	if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
		alert(gl.getShaderInfoLog(shader));
		return null;
	}

	return shader;
}

function RaytracingDemo() {
}

RaytracingDemo.prototype.initShaders = function() {

	this.shaderProgram = gl.createProgram();

	gl.attachShader(this.shaderProgram, getShader(gl, "RaytracingDemoVS"));
	gl.attachShader(this.shaderProgram, getShader(gl, "RaytracingDemoFS"));
	gl.linkProgram(this.shaderProgram);

	if (!gl.getProgramParameter(this.shaderProgram, gl.LINK_STATUS)) {
		alert("Could not initialise shaders");
	}

	gl.useProgram(this.shaderProgram);

	this.shaderProgram.vertexPositionAttribute = gl.getAttribLocation(this.shaderProgram, "position");
	gl.enableVertexAttribArray(this.shaderProgram.vertexPositionAttribute);

	this.shaderProgram.projectionMatrixUniform = gl.getUniformLocation(this.shaderProgram, "projectionMatrix");
	this.shaderProgram.modelviewMatrixUniform = gl.getUniformLocation(this.shaderProgram, "modelViewMatrix");
}

RaytracingDemo.prototype.initBuffers = function() {
	this.triangleVertexPositionBuffer = gl.createBuffer();
	gl.bindBuffer(gl.ARRAY_BUFFER, this.triangleVertexPositionBuffer);
	
	var vertices = [
		 -1,  -1,  0,
		 -1,  1,  0,
		 1,  1,  0,

		 -1,  -1,  0,
		 1,  -1,  0,
		 1,  1,  0,
	 ];
	gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
	this.triangleVertexPositionBuffer.itemSize = 3;
	this.triangleVertexPositionBuffer.numItems = 3 * 2;
}

function getTime() {
	var d = new Date();
	return d.getMinutes() * 60.0 + d.getSeconds() + d.getMilliseconds() / 1000.0;
}

RaytracingDemo.prototype.drawScene = function() {
			
	var perspectiveMatrix = new J3DIMatrix4();	
	perspectiveMatrix.setUniform(gl, this.shaderProgram.projectionMatrixUniform, false);

	var modelViewMatrix = new J3DIMatrix4();	
	modelViewMatrix.setUniform(gl, this.shaderProgram.modelviewMatrixUniform, false);

	gl.uniform1f(gl.getUniformLocation(this.shaderProgram, "time"), getTime());
		
	gl.bindBuffer(gl.ARRAY_BUFFER, this.triangleVertexPositionBuffer);
	gl.vertexAttribPointer(this.shaderProgram.vertexPositionAttribute, this.triangleVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);
	
	gl.drawArrays(gl.TRIANGLES, 0, this.triangleVertexPositionBuffer.numItems);
}

RaytracingDemo.prototype.run = function() {
	this.initShaders();
	this.initBuffers();

	gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);
	gl.clear(gl.COLOR_BUFFER_BIT);

	this.drawScene();
};

function init() {	
	

	env = new RaytracingDemo();	
	env.run();

    return env;
}

function compute(canvas)
{
    env.initShaders();
    env.initBuffers();

    gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);
    gl.clear(gl.COLOR_BUFFER_BIT);

    env.drawScene();
}
